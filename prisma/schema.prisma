// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  premium       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Additional profile fields
  bio           String?   @db.Text
  location      String?
  website       String?
  phoneNumber   String?
  
  // Preferences
  theme         String?   @default("system") // light, dark, or system
  language      String?   @default("en")
  
  // Notification settings
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  favorites     Favorite[]
  playlists     Playlist[]
  isPremium     Boolean    @default(false)
  premiumUntil  DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Song {
  id            String     @id @default(cuid())
  title         String
  artist        String
  videoId       String     @unique
  thumbnailUrl  String
  lyrics        String?    @db.Text
  hasKaraoke    Boolean    @default(false)
  isPremium     Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  favorites     Favorite[]
  playlists     PlaylistSong[]
}

model Favorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId    String
  createdAt DateTime @default(now())

  @@unique([userId, songId])
}

model Playlist {
  id          String         @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean        @default(true)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  songs       PlaylistSong[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model PlaylistSong {
  id         String   @id @default(cuid())
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String
  song       Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId     String
  order      Int
  createdAt  DateTime @default(now())

  @@unique([playlistId, songId])
}